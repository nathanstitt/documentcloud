Until we have full provisioning scripts, keep notes about everything that we
touch on EC2 in here.

========================= Base DocumentCloud Image ============================
====================== dcworker has all the steps below ======================
==================== based on the snap-05235d6c snapshot ======================

* Use the official Canonical Ubuntu 12.04 Precise Image
  Use the us-east-1c availability zone.
  
* If bundling an EBS Boot Volume, follow the directions here (mas o menos):
  http://alestic.com/2010/01/ec2-ebs-boot-ubuntu
  At step 5, continue with our custom configuration below....

* Switch to a temporary directory.

* Update aptitude.

* Install these packages:
  apt-get install build-essential libcurl4-openssl-dev libssl-dev zlib1g-dev            \
  rubygems git sqlite3 libsqlite3-dev libpcre3-dev lzop libxslt-dev libcurl4-gnutls-dev \
  libitext-java graphicsmagick pdftk xpdf poppler-utils libpcre3-dev ruby1.8            \
  libreoffice libreoffice-java-common tesseract-ocr ghostscript libxml2-dev curl        \
  tesseract-ocr-eng tesseract-ocr-deu tesseract-ocr-spa tesseract-ocr-fra
  
* Install postgresql apt sources, full instructions at http://wiki.postgresql.org/wiki/Apt
  echo deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main > /etc/apt/sources.list.d/pgdg.list
  wget --quiet -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add -
  sudo apt-get update
  sudo apt-get install postgresql-9.3 postgresql-contrib libpq-dev 

* Install these gems (sudo gem install --no-ri --no-rdoc):
  cloud-crowd sqlite3 pg bundler passenger libxml-ruby
  
* Install Node.js (from source, unfortunately): Nodejs.org (v0.1.99)
  
* If installing for DocumentCloud use, install the private DocumentCloud SSH credentials.
  (for the current user, root on the EBS chroot):
  mkdir -p ~/.ssh (or /root/.ssh)
  Copy the contents of secrets/keys/github.pem to .ssh/id_dsa
  chmod 0600 .ssh/id_dsa
  
* Checkout DocumentCloud from github (or your private fork):
  git clone git@github.com:documentcloud/documentcloud.git ~/documentcloud

* Install dependencies with bundler
  cd ~/documentcloud
  bundle install
  
* If your are going to run Pixel Ping, check it out:
  git clone git@github.com:documentcloud/pixel-ping.git ~/pixel-ping

* Check out the latest stable nginx source, then use 
  passenger-install-nginx-module to install a custom nginx
  with prefix /usr/local/nginx, and including
  --with-http_gzip_static_module --with-http_ssl_module
  
* Copy over the nginx.conf config from config/server/nginx to /usr/local/nginx/conf.
  Copy over the appropriate environment config to sites-enabled.
  Add /usr/local/nginx/sbin to the PATH in .bashrc.
  mkdir -p /var/log/nginx
  
* If using in production, tune Postgresql config:
  http://wiki.postgresql.org/wiki/Performance_Optimization



============================= Postgres EBS ===================================

* Follow the directions here:
    http://deadprogrammersociety.blogspot.com/2009/08/postgresql-on-ubuntu-on-ec2.html
  Follow Mike's directions to move the Postgres files to the EBS:
    http://gist.github.com/272258
  Copy over configuration from config/server/postgres to /etc/postgresql/8.4/main...
  pg_ctlcluster 8.4 main start
  Our postgre DB (volume vol-d4c305bd) is mounted at /data.
  
* Install the HStore module, by cd-ing into the contrib directory of your postgres, and following the directions here:

http://www.postgresql.org/docs/8.3/static/contrib.html
  
============================= development ====================================

* Install the dependencies and gems listed in PROVISIONING, as appropriate 
  (ie, don't install Tesseract unless you're planning on doing OCR).

* Configure Nginx and /etc/hosts to serve dev.dcloud.org locally. An example
  Nginx configuration is stored in config/server/nginx

* Load the development_structure.sql into the database listed in config/database.yml.
  Load the analytics_structure.sql into the database listed in config/database_analytics.yml

* Create your CloudCrowd database, using the config/cloud_crowd/development
  configuration folder.

* Start a local CloudCrowd server and node, with 
  `rake crowd:server:start crowd:node:start`

* Start Nginx.
